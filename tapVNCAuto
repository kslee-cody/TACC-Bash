#!/bin/bash
#
#-----------------------------------------------------------------------------
# This script was generated automatically by the TACC Analytic Portal (TAP)
#
# This TAP job script is designed to create a vnc session on 
# TAP-supported nodes through the SLURM batch system. Once the job
# is scheduled, check the output of your job (which by default is
# stored in the output file specified below in your /home1/10328/kl36552/.tap directory)
# and it will tell you the port number that has been setup for you so
# that you can connect via web browser to any system login 
# node (e.g., frontera.tacc.utexas.edu).
#
#-----------------------------------------------------------------------------
#
#SBATCH -J tap_vncserver              # Job name
#SBATCH -o /home1/10328/kl36552/.tap/VNC-141533-%j.out # Name of stdout output file (%j expands to jobId)
#SBATCH -p development          # Queue name
#SBATCH -N 1                    # Total number of nodes requested 
#SBATCH -n 1                    # Total number of mpi tasks requested
#SBATCH -t 2:00:00                     # Run time (hh:mm:ss) 
#SBATCH -A DDM23004
#
#
#--------------------------------------------------------------------------

#--------------------------------------------------------------------------
# ---- You normally should not need to edit anything below this point -----
#--------------------------------------------------------------------------
#
# last update: pnav 20220125

echo "TACC: job ${SLURM_JOB_ID} execution at: $(date)"

# our node name
NODE_HOSTNAME=$(hostname -s)
echo "TACC: running on node ${NODE_HOSTNAME}"

# VNC server executable
VNCSERVER_BIN=$(which vncserver 2> /dev/null)
echo "TACC: using default VNC server ${VNCSERVER_BIN}"

# if the user has conda active, VNC will break since conda uses a different dbus
CONDA=$(which conda 2> /dev/null)
if [ ! -z "${CONDA}" ]; then
  CONDA_ENV=$(conda info | grep active | cut -d ":" -f 2)
  if [[ ! "${CONDA_ENV}" =~ "None" ]]; then
    echo "TACC:"
    echo "TACC: ERROR - active conda installation detected, which will break VNC"
    echo "TACC: ERROR - please deactivate conda by running"
    echo "TACC: ERROR -     `conda config --set auto_activate_base false`"
    echo "TACC: ERROR - then resubmit this job script"
    echo "TACC: ERROR - Questions? Please submit a consulting ticket"
    echo "TACC: ERROR - https://tacc.utexas.edu/portal/tickets"
    echo "TACC:"
    echo "TACC: job ${SLURM_JOB_ID} execution finished at: $(date)"
    exit 1
  fi
fi

# launch VNC session
VNC_PASSFILE=$(mktemp -t XXXXXXXXXXXXXXX)
echo "wolV9evgd6LT3zRdJHoxdkcqZRUAccFHftpM5iNiDG0" | vncpasswd -f > ${VNC_PASSFILE}
VNCSERVER_ARGS="-rfbauth ${VNC_PASSFILE} -localhost -nolisten tcp"

VNC_DISPLAY=$(${VNCSERVER_BIN} ${VNCSERVER_ARGS} 2>&1 | grep desktop | awk -F: '{print $3}')
echo "TACC: got VNC display :${VNC_DISPLAY}"

if [ "x${VNC_DISPLAY}" == "x" ]; then
    echo "TACC:"
    echo "TACC: ERROR -   Error launching vncserver: $VNCSERVER"
    echo "TACC: ERROR -   Please submit a ticket to the TACC User Portal"
    echo "TACC: ERROR -   https://tacc.utexas.edu/portal/tickets"
    echo "TACC:"
    echo "TACC: job ${SLURM_JOB_ID} execution finished at: $(date)"
    exit 1
fi

LOCAL_VNC_PORT=$(expr 5900 + ${VNC_DISPLAY})
echo "TACC: local (compute node) VNC port is ${LOCAL_VNC_PORT}"

LOGIN_VNC_PORT=60129
echo "TACC: got login node VNC port ${LOGIN_VNC_PORT}"

TAP_CERTFILE=${HOME}/.tap/.${SLURM_JOB_ID}
# bail if we cannot create a secure session
if [ ! -f ${TAP_CERTFILE} ]; then
    echo "TACC: ERROR - could not find TLS cert for secure session"
    echo "TACC: job ${SLURM_JOB_ID} execution finished at: $(date)"
    exit 1
fi

WEBSOCKIFY_CMD="/home1/00832/envision/websockify/run"
WEBSOCKIFY_PORT=5902
WEBSOCKIFY_ARGS="--cert=$(cat ${TAP_CERTFILE}) --ssl-only -D ${WEBSOCKIFY_PORT} localhost:${LOCAL_VNC_PORT}"
${WEBSOCKIFY_CMD} ${WEBSOCKIFY_ARGS} # websockify will daemonize

NOVNC_ARGS="host=frontera.tacc.utexas.edu&port=60129&autoconnect=true&encrypt=true&resize=scale&password=wolV9evgd6LT3zRdJHoxdkcqZRUAccFHftpM5iNiDG0"
VNC_URL="https://tap.tacc.utexas.edu/noVNC/?${NOVNC_ARGS}"

# create reverse tunnel port to login nodes.  Make one tunnel for each login so the user can just
# connect to frontera.tacc.utexas.edu
NUM_LOGINS=4
for i in $(seq ${NUM_LOGINS}); do
    ssh -q -f -g -N -R ${LOGIN_VNC_PORT}:${NODE_HOSTNAME}:${WEBSOCKIFY_PORT} login${i}
done
if [ $(ps -fu ${USER} | grep ssh | grep login | grep -vc grep) != ${NUM_LOGINS} ]; then
    echo "TACC: ERROR - ssh tunnels failed to launch"
    echo "TACC: ERROR - this is often due to an issue with your ssh keys"
    echo "TACC: ERROR - undo any recent mods in ${HOME}/.ssh"
    echo "TACC: ERROR - or submit a TACC consulting ticket with this error"
    echo "TACC: job ${SLURM_JOB_ID} execution finished at: $(date)"
    exit 1
fi
echo "TACC: Created reverse ports on Frontera logins"

echo "TACC: Your VNC server is now running at ${VNC_URL}"
# set display for X applications
export DISPLAY=":${VNC_DISPLAY}"

# if on GPUs, we need vglclient to run to have graphics across multi-node jobs
VGLCLIENT=$(which vglclient 2> /dev/null)
if [ \! -z ${VGLCLIENT} ]; then 
    echo "TACC: Launching vglclient"
    vglclient >& /dev/null &
    VGL_PID=$!
fi

mkdir -p ${HOME}/.tap # this should exist at this point, but just in case...
TAP_CONNECTION=${HOME}/.tap/.${SLURM_JOB_ID}.url
echo ${VNC_URL} > ${TAP_CONNECTION}
TAP_LOCKFILE=${HOME}/.tap/.${SLURM_JOB_ID}.lock
DISPLAY=:1 xterm -fg white -bg red3 +sb -geometry 55x2+0+0 -T 'END SESSION HERE' -e "echo 'TACC: Press <enter> in this window to end your session' && read && rm ${TAP_LOCKFILE}" 2> /dev/null &
sleep 1
DISPLAY=:1 xterm -ls -geometry 80x24+100+50 2> /dev/null &

# spin on lock until file is removed
echo ${VNC_URL} > ${TAP_LOCKFILE}
while [ -f ${TAP_LOCKFILE} ]; do
    sleep 1
done

# job is done!

if [ \! -z ${VGL_PID} ]; then
    echo "TACC: Killing VGL client"
    kill ${VGL_PID}
fi

echo "TACC: Killing VNC server" 
vncserver -kill ${DISPLAY}

# wait a brief moment so vncserver can clean up after itself
sleep 1

echo "TACC: job ${SLURM_JOB_ID} execution finished at: $(date)"